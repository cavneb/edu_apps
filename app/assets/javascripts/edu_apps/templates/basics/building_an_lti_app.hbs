<section id="docs-building-an-lti-app">
  <h2 class="page-header">Building an LTI App</h2>
  
  <p>
    If you want to build an LTI-compliant app or <span class="label label-info">provider</span> then there's really only a couple things you need to worry about: how users can configure your app, how to accept a launch from a <span class="label label-warning">consumer</span>, and potentially handling some of the extra goodies LTI makes possible.
  </p>
  <h4>App Configuration</h4>
  <p>
    App configuration is <a href="/tutorials.html">different for every LMS</a> right now, but we're working on that. The best way to provide a standard configuration for your app is by providing a url that returns an xml configuration for your app. There's a lot of <a href="https://canvas.instructure.com/doc/api/tools_xml.html">examples of app configurations in the Canvas API documentation</a>. Remember, if there's custom values you want to make sure come across with every user, this is the place to include them. The only really crucial iece to specify is the url endpoint that will accept the POST requests, <code>blti:launch_url</code>.
  </p>
  <p>
    Typically users will either copy the url to your xml configuration, or copy and paste the configuration itself. Notice that the configuration does not include the consumer key or shared secret. These are account-specific values, and if they were included they'd prevent the xml from being reusable. Admins will still have to enter the key and secret values that a <span class="label label-info">provider</span> gives them into the <span class="label label-warning">consumer</span> manually.
  </p>
  <h4>App Launch</h4>
  <p>
    Once an app is configured, it will be added by one or more instructors into their material as some sort of link or button in the <span class="label label-warning">consumer</span>. Any time a student, instructor, administrator, or random internet passersby clicks the link they will be directed to the <span class="label label-info">provider</span> via a signed POST request. It is the <span class="label label-info">provider's</span> responsibility to confirm the signature on the POST request. If the signature is invalid then none of the information should be trusted.
  </p>
  <p>
    If the signature is valid then you should accept the identity assertion provided by the <span class="label label-warning">consumer</span> and log the user in to your service. Many services have their own registration flow, so it's not uncommon to require an additional registration step the first time a user launches your app.
  </p>
  <p>
    Signatures are generated using <a href="http://oauth.net/core/1.0/#signing_process">the OAuth signing process</a>. Google provides <a href="http://oauth.googlecode.com/svn/code/javascript/example/signature.html">a nice tool for generating OAuth signatures</a> that you can use to test your signing code, although you'll probably save yourself some trouble if you can find a library to do the work for you.
  </p>
  <h4>Extras</h4>
  <p>
    This page has described the most basic type of LTI integration. There's a number of other things you can do on top of this, including passing scores from the <span class="label label-info">provider</span> back to the gradebook of the consumer, or adding buttons to the rich editor in the <span class="label label-warning">consumer</span> to insert rich content generated or curated by the <span class="label label-info">provider</span>. <a href="/extensions">Check out the extensions demos page</a> or the <a href="https://canvas.instructure.com/doc/api/tools_intro.html">Canvas API documentation on external tools</a> for more detail on these extensions and how they work.
  </p>
</section>